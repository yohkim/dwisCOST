<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dowinsys.mes.web.m0001000.mapper.M0001007Mapper">

	<select id="selectMatFilterIn" resultType="CamelMap">
			SELECT
				a.in_no,
				a.mat_type_code,
				a.sub_mat_type_code,
				a.in_date,
				a.in_time,
				a.filter_name,
				a.unit,
				a.in_qty,
				a.use_qty,
				a.remain_qty,
				a.use_yn,
				a.worker_id,
				a.worker_name,
				a.comments,
				a.create_date,
				a.create_user,
				case when isnull(c.close_yn,'N') = 'N' and a.use_yn = 'N' then 'Y'
				 	    else 'N'
			    end as editable						
			FROM dw_sub_mat_filter_in a
			left outer join ( select * from dw_mat_close_info where mat_category_code ='40' and mat_type_code='FILTER' ) c 
			on ( a.in_date = c.stock_date )				
			WHERE a.in_date between #{fromDate} and #{toDate}
			<if test="subMatTypeCode != null and subMatTypeCode.trim() != ''" >
			  AND a.sub_mat_type_code = #{subMatTypeCode}	
			</if>
			order by a.in_date desc, a.in_time desc, a.in_no desc, a.sub_mat_type_code 
	</select>
	
	<select id="checkUseInData" resultType="Map">
		select COALESCE(STRING_AGG(in_no, '/'), 'NoData') AS inNo
		from dw_sub_mat_filter_in a
		where upper(a.in_no) in
		<foreach item="item" collection="vo" open="(" separator="," close=")" >
			upper(#{item.inNo})
		</foreach>
		and a.use_yn = 'Y'
	</select>		

	<insert id="insertInData">
		INSERT INTO dw_sub_mat_filter_in
		(
			in_no,
			mat_type_code,
			sub_mat_type_code,
			in_date,
			in_time,
			filter_name,
			unit,
			in_qty,
			use_qty,
			remain_qty,
			use_yn,
			worker_id,
			worker_name,
			comments,
			create_date,
			create_user
		)
		VALUES
		(
			( 
				select case when isnull(max(in_no),'') = '' then 'FI' + #{inDate} + '001'
			            	else 'FI' + #{inDate} + RIGHT('000' + cast((cast(substring(max(in_no),11,13) as int) + 1) as varchar),3)
			       		end as in_no
				from dw_sub_mat_filter_in
				where in_date = #{inDate} 
			),
			#{matTypeCode},
			#{subMatTypeCode},
			#{inDate},
			#{inTime},
			( select code_name from dw_common_code where maj_code='77' and code=#{subMatTypeCode}),
			#{unit},
			#{inQty},
			0,
			#{inQty},
			#{useYn},
			#{workerId},
			#{workerName},
			#{comments},
			getdate(),
			#{workerId}	
		)
	</insert>

	<update id="updateInData">
		UPDATE dw_sub_mat_filter_in
			SET sub_mat_type_code = #{subMatTypeCode},
				filter_name = #{filterName},
				worker_name = #{workerName},
				in_qty = #{inQty},
				remain_qty = #{inQty},
				comments = #{comments}
		WHERE in_no = #{inNo}
	</update>	
	
	<delete id="deleteInData">
		DELETE FROM dw_sub_mat_filter_in
		WHERE in_no = #{inNo}
	</delete>
	
	<select id="selectMatFilterOut" resultType="CamelMap">
		SELECT
			a.out_no,
			a.mat_type_code,
			a.sub_mat_type_code,
			a.work_date,
			a.shift_code,
			a.out_seq,
			a.out_date,
			a.out_time,
			a.filter_name,
			a.worker_name,
			a.line,
			a.step_code,
			a.step_nm,
			a.equip_no,
			a.equip_nm,
			a.unit,
			isnull(b.remain_qty,0) remain_qty,
			isnull(b.remain_qty,0) + isnull(a.out_qty,0) as stock_qty,
			isnull(a.out_qty,0) out_qty,
			isnull(a.out_qty,0)  as org_out_qty,	
			a.comments,
			a.create_date,
			a.create_user,
			case when isnull(d.close_yn, 'N') = 'N' and 
			 		<![CDATA[
						( ( datepart(hour,getdate())   <  8
			              		and ( a.out_date = CONVERT(VARCHAR(8), getdate(), 112) ) or 
							  		( a.out_date = CONVERT(VARCHAR(8), DATEADD(DAY, -1, getdate()), 112) and convert(int,substring(a.out_time, 1,2))   >   19)
					     	) or 
					     	( datepart(hour,getdate())   >=   8 and a.out_date = CONVERT(VARCHAR(8), getdate(), 112) 
					     	)
					     )  ]]>
			        then 'Y'
			        else 'N'
			   end editable		
		FROM dw_sub_mat_filter_out a 
		left outer join 
		( 
				select sub_mat_type_code, sum(remain_qty) as remain_qty 
		       	from dw_sub_mat_filter_in b
		       	where remain_qty > 0
		       	group by sub_mat_type_code
		) b		       	  
		on ( a.sub_mat_type_code = b.sub_mat_type_code)
		left outer join (select * from dw_mat_close_info where mat_category_code ='40' and mat_type_code='FILTER' ) d 
		on ( a.work_date = d.stock_date )			
		where a.work_date between #{fromDate} and #{toDate}
		<if test="shiftCode != null and shiftCode.trim() != ''" >		
		  and a.shift_code = #{shiftCode}
		</if>
		<if test="equip != null and equip.trim() != ''" >	
		  and a.line= #{line} and a.equip_no = #{equip}
		</if>		
		order by a.out_date desc, 
			    a.out_time desc,
			    a.out_seq desc	
	</select>	
	
	<select id="selectFilterInfo" resultType="CamelMap">	
		select sub_mat_type_code , filter_name, sum(remain_qty) as remain_qty
		  from dw_sub_mat_filter_in
		 where sub_mat_type_code = #{subMatTypeCode}
		   and remain_qty > 0
		 group by sub_mat_type_code, filter_name
	</select>	
	
	<select id="insertOutData" resultType="String">
	
		INSERT INTO dw_sub_mat_filter_out
		(
			out_no,
			mat_type_code,
			sub_mat_type_code,
			work_date,
			shift_code,
			out_seq,
			out_date,
			out_time,
			filter_name,
			worker_name,
			line,
			step_code,
			step_nm,
			equip_no,
			equip_nm,
			unit,
			out_qty,
			comments,
			create_date,
			create_user
		)
		OUTPUT inserted.out_no
		VALUES	
		(
			(
				select case when  isnull(max(out_no),'') = '' then  'FO' + #{workDate} + #{shiftCode} + '001'
			                else  'FO'  + #{workDate}  + #{shiftCode}  + RIGHT('000' + cast((cast(substring(max(out_no),12,14) as int) + 1) as varchar),3)
			           end as out_no
				from dw_sub_mat_filter_out 
			    where work_date = #{workDate} and shift_code = #{shiftCode}
			),
			#{matTypeCode},
			#{subMatTypeCode},
			#{workDate},
			#{shiftCode},
			(select COALESCE(max(out_seq),0)+1 from dw_sub_mat_filter_out where work_date=#{workDate} and mat_type_code='FILTER' and shift_code = #{shiftCode}),
			#{outDate},         
			#{outTime},  
			#{filterName},
			#{workerName},      
			#{line},             
			#{stepCode},        
			#{stepNm},          
			#{equipNo},         
			#{equipNm},         
			#{unit},         
			isnull(#{outQty},0),
			#{comments}, 
			getdate(),
			#{createUser}
		)
	
	</select>
	
	<insert id="insertOutDetailData">
	
		WITH fifo AS (
		    SELECT 
		        in_no, 
		        remain_qty, 
		        SUM(remain_qty) OVER (ORDER BY in_no) AS cumulative_qty
		    FROM dw_sub_mat_filter_in
		    WHERE sub_mat_type_code = #{subMatTypeCode}
		      and remain_qty <![CDATA[ > ]]> 0
		)
		INSERT INTO dw_sub_mat_filter_out_detail
		(
			out_no,
			in_no,
			use_qty,
			create_date,
			create_user
		)
		select #{outNo},
				in_no,
				out_qty,
				getdate(),
				#{createUser}
		from 
		( 
			SELECT 
			    in_no, 
			    remain_qty, 
			    CASE 
			        WHEN cumulative_qty <![CDATA[ <= ]]> #{outQty} THEN remain_qty
			        ELSE remain_qty - (cumulative_qty - #{outQty})
			    END AS out_qty
			FROM fifo
			WHERE cumulative_qty - remain_qty <![CDATA[ < ]]> #{outQty}	
		) a
			
	</insert>
	
	<update id="updateRemainQtyMinus">
		UPDATE a 
			SET use_qty = a.use_qty + b.use_qty, 
			    remain_qty = a.remain_qty -  b.use_qty,
			    use_yn = 'Y'
		from dw_sub_mat_filter_in a 
		join dw_sub_mat_filter_out_detail b
		on ( a.in_no = b.in_no )
		WHERE b.out_no = #{outNo}
	</update>
	
	<update id="updateRemainQtyPlus">
		UPDATE a 
			SET use_qty = a.use_qty - b.use_qty, 
			    remain_qty = a.remain_qty + b.use_qty,
			    use_yn = case when (a.use_qty - b.use_qty) <![CDATA[ <=0 ]]> then 'N'
			             	  else 'Y'
			              end
		from dw_sub_mat_filter_in a 
		join dw_sub_mat_filter_out_detail b
		on ( a.in_no = b.in_no )
		WHERE b.out_no = #{outNo}
	</update>	
	
	<delete id="deleteOutDetailData">
		DELETE FROM dw_sub_mat_filter_out_detail
		WHERE out_no = #{outNo}
	</delete>
	
	<delete id="deleteOutData">
		DELETE FROM dw_sub_mat_filter_out
		WHERE out_no = #{outNo}
	</delete>	
	
	<update id="updateOutData">
		UPDATE dw_sub_mat_filter_out
			SET worker_name = #{workerName},
				line = #{line},
				step_code = #{stepCode},
				step_nm = #{stepNm},
				equip_no = #{equipNo},
				equip_nm = #{equipNm},
				out_qty = isnull(#{outQty},0),
				comments = #{comments}
		WHERE out_no = #{outNo}	
	</update>
	
	<!-- 재고실사 -->	
	<select id="selectMaxStockDate" resultType="String">
		SELECT CONVERT(VARCHAR(8), 
			       	   ISNULL(max(stock_date), CONVERT(VARCHAR(8), DATEADD(HOUR, 9, GETUTCDATE()), 112)), 
			       	   112) AS stockDate
		FROM dw_sub_mat_filter_stock
	</select>	
	
	<select id="selectConfirmN" resultType="int">
		select count(1) as cnt
		from dw_sub_mat_filter_stock
		where stock_date = #{stockDate}
		  and confirm_yn = 'N'
	</select>
	
	<select id="selectSubMatFilterStock" resultType="CamelMap">
		SELECT 
			a.stock_date,
			a.mat_type_code,
			a.sub_mat_type_code,
			a.filter_name,
			a.unit,
			a.prev_stock_qty,
			a.prev_real_stock_qty,
			a.in_qty,
			a.out_qty,
			a.stock_qty,
			a.real_stock_qty,
			a.diff_qty,	
			a.confirm_yn,
			a.charger_id,
			a.charger_name,
			a.comments,
			case when c.status = 'CLOSE' then 'N'
			     else 'Y'
			end as editable			
		FROM dw_sub_mat_filter_stock a 
		left outer join ( select * from dw_mat_close_info where mat_category_code='40' and mat_type_code='FILTER' ) c
		on ( a.stock_date = c.stock_date  )	
		where a.stock_date = #{stockDate}
		<if test="subMatType != null and subMatType.trim() != ''" >
		  and a.sub_mat_type_code = #{subMatType}
		</if>
		<if test="confirmYn != null and confirmYn.trim() != ''" >
		  and a.confirm_yn = #{confirmYn}
		</if>
		<if test="diffYn != null and diffYn.trim() != ''" >
          AND (
            	(#{diffYn} = 'N' AND a.diff_qty = 0) OR
            	(#{diffYn} = 'Y' AND a.diff_qty != 0)
           )
		</if>
		order by a.stock_date, a.sub_mat_type_code
	</select>
	
	<select id="createTempMatStockTable">
	    SELECT *
	      INTO ${tempTableName}
	      FROM dw_sub_mat_filter_stock
	     WHERE stock_date = #{stockDate}
	</select>	
	
	<delete id="dropTempMatStockTable">
		DROP TABLE ${tempTableName}
	</delete>		
	
	<delete id="deleteSubMatFilterStock">
		delete from dw_sub_mat_filter_stock
		where stock_date = #{stockDate}
	</delete>
	
	<insert id="insertSubMatFilterStock">
		INSERT INTO dw_sub_mat_filter_stock
		(
			stock_date,
			mat_type_code,
			sub_mat_type_code,
			filter_name,			
			unit,
			prev_stock_qty,
			prev_real_stock_qty,
			in_qty,
			out_qty,
			stock_qty,
			real_stock_qty,
			diff_qty,
			confirm_yn,
			charger_id,
			charger_name,
			comments,
			create_date,
			create_user
		)		
		select a.stock_date,
				a.mat_type_code,
				a.sub_mat_type_code,
				a.filter_name,				
				a.unit,
				a.prev_stock_qty,
				a.prev_real_stock_qty,
				a.in_qty,
				a.out_qty,
				( a.prev_stock_qty + a.in_qty - a.out_qty ) as stock_qty,				
				case when b.status is null or b.status = 'SUMMARY' or b.real_stock_qty is null then 
							( a.prev_real_stock_qty + a.in_qty - a.out_qty ) 
					 else b.real_stock_qty
			    end as real_stock_qty,
				case when b.status is null or b.status = 'SUMMARY' or b.real_stock_qty is null then 
							( a.prev_real_stock_qty + a.in_qty - a.out_qty ) - ( a.prev_stock_qty + a.in_qty - a.out_qty )
					 else ( b.real_stock_qty ) - ( a.prev_stock_qty + a.in_qty - a.out_qty )
			    end as diff_qty,	
			    case when b.status is null or b.status = 'SUMMARY' or b.real_stock_qty is null then 'Y'
				     else b.confirm_yn
				end as confirm_yn,
				case when #{workerId} = 'SYSTEM' and #{workerName} = 'SYS_BATCH' and b.charger_id is not null then b.charger_id
				     else #{workerId}
				end as worker_id,
				case when #{workerId} = 'SYSTEM' and #{workerName} = 'SYS_BATCH' and b.charger_id is not null then b.charger_name
				     else #{workerName}
				end as worker_name,
			    case when b.status is null or b.status = 'SUMMARY' or b.real_stock_qty is null then ''
				     else b.comments
				end as comments,	
				getdate(),
				#{workerId}
		from 		
		( 
			select #{stockDate} as stock_date,
					a.mat_type_code,
					a.sub_mat_type_code,
					a.filter_name,							
					a.unit,
					sum(case when gubun = 'PRE_STOCK' then qty else 0 end) as prev_stock_qty,
					sum(case when gubun = 'PRE_STOCK' then real_qty else 0 end) as prev_real_stock_qty,
					sum(case when gubun = 'IN' then qty else 0 end) as in_qty,
					sum(case when gubun = 'OUT' then qty else 0 end) as out_qty				
			from 
			(
				SELECT 'PRE_STOCK' as gubun, 
						mat_type_code,
						sub_mat_type_code,
						filter_name,						
						unit,
						sum(stock_qty) as qty,
						sum(real_stock_qty) as real_qty
				FROM dw_sub_mat_filter_stock a
				where stock_date = convert(char(8), dateadd(DAY, -1, cast(#{stockDate} as date)), 112)
				  and ( stock_qty > 0  or real_stock_qty > 0 )
				GROUP by mat_type_code, sub_mat_type_code, filter_name, unit
				union all
				SELECT 'IN' as gubun, 
						a.mat_type_code,
						a.sub_mat_type_code,
						a.filter_name,							
						unit,
						sum(in_qty) as qty,
						sum(in_qty) as real_qty
			    FROM dw_sub_mat_filter_in a
				where in_date + in_time between #{stockDate} + '08:00' and convert(char(8), dateadd(DAY, 1, cast(#{stockDate} as date)), 112) + '07:59'
				GROUP by mat_type_code, sub_mat_type_code, filter_name, unit
				union all 
				SELECT 'OUT' as gubun, 
						mat_type_code,
						sub_mat_type_code,
						filter_name,							
						unit,
						sum(out_qty) as qty,
						sum(out_qty) as real_qty			
				FROM dw_sub_mat_filter_out a
				where work_date = #{stockDate}
				GROUP BY mat_type_code, sub_mat_type_code, filter_name, unit
			) a 
			group by mat_type_code, sub_mat_type_code, filter_name, unit
		) a
		left outer join 
		(
			select a.stock_date, a.mat_type_code, a.sub_mat_type_code, a.real_stock_qty, a.confirm_yn, a.comments, b.status, a.charger_id, a.charger_name
			  from ${tempTableName} a 
			left outer join 
			( 
				select * from dw_mat_close_info 
				where stock_date = #{stockDate}
				  and mat_category_code = '40' and mat_type_code='FILTER'
			) b 
			on ( a.stock_date = b.stock_date )
			where a.stock_date = #{stockDate}
		) b 
		on ( a.stock_date = b.stock_date
		     and a.mat_type_code = b.mat_type_code
		     and a.sub_mat_type_code = b.sub_mat_type_code )				
	</insert>
	
	<update id="updateSubMatFilterStock">
		update dw_sub_mat_filter_stock
		   set charger_name = #{workerName}, 
		       real_stock_qty = isnull(#{realStockQty},0),
			   diff_qty =  isnull(#{realStockQty},0) - stock_qty,
			   confirm_yn = #{confirmYn},
			   comments = #{comments}
		where stock_date = #{stockDate}
		  and mat_type_code = #{matTypeCode}	
		  and sub_mat_type_code = #{subMatTypeCode}	
	</update>
	
	<insert id="insertSubMatFilterEquipOut">
		INSERT INTO dw_sub_mat_filter_equip_out
		(
			stock_date,
			mat_type_code,
			sub_mat_type_code,
			filter_name,
			line,
			step_code,
			step_nm,
			equip_no,
			equip_nm,
			out_qty,
			create_date,
			create_user
		)
		select work_date,
			mat_type_code,
			sub_mat_type_code,
			filter_name,
			line,
			step_code,
			step_nm,
			equip_no,
			equip_nm,
			sum(out_qty),
			getdate(),
			#{workerId}	
		from dw_sub_mat_filter_out
		where work_date = #{stockDate}
		GROUP BY work_date,
			mat_type_code,
			sub_mat_type_code,
			filter_name,
			line,
			step_code,
			step_nm,
			equip_no,
			equip_nm	
	</insert>
	
	<delete id="deleteSubMatFilterEquipOut">
		delete from dw_sub_mat_filter_equip_out
		where stock_date = #{stockDate}
	</delete>	
	
<!-- Report -->
	<select id="selectSubMatFilterMonthReport" resultType="CamelMap">	
		WITH BaseData AS (
	        SELECT 
	            sub_mat_type_code,
	            filter_name,
	            'Total' as step,
	            '' as equip,
	            stock_date,
	            sort_order,	            
	            gubun,
	            CASE WHEN gubun = 'in_qty' THEN '1'
	                 WHEN gubun = 'out_qty' THEN '2'               
	                 WHEN gubun = 'stock_qty' THEN '4'
	                 WHEN gubun = 'real_stock_qty' THEN '3'
	                 WHEN gubun = 'diff_qty' THEN '5'
	            END AS item_order,
	            CASE WHEN gubun = 'in_qty' THEN '입고'
	                 WHEN gubun = 'out_qty' THEN '사용'           
	                 ELSE '재고'
	            END AS item_name1,  
	            CASE WHEN gubun = 'stock_qty' THEN '전산'
	                 WHEN gubun = 'real_stock_qty' THEN '실물'
	                 WHEN gubun = 'diff_qty' THEN '차이'
	                 ELSE ''
	            END AS item_name2,        
	            qty
	        FROM 
	        (
	            SELECT
	            	sub_mat_type_code,
	            	filter_name,	                
	                stock_date,
	                1 AS sort_order,
	                in_qty,
	                out_qty,
	                stock_qty,
	                real_stock_qty,
	                diff_qty
	            FROM dw_sub_mat_filter_stock
	            WHERE stock_date LIKE CONCAT(#{month}, '%')
	            UNION ALL 
	            SELECT
	                sub_mat_type_code,
	                filter_name,
	                'Total' AS stock_date,
	                1 AS sort_order,
	                SUM(in_qty) AS in_qty,
	                SUM(out_qty) AS out_qty,
	                SUM(stock_qty) AS stock_qty,
	                SUM(real_stock_qty) AS real_stock_qty,
	                SUM(diff_qty) AS diff_qty
	            FROM dw_sub_mat_filter_stock
	            WHERE stock_date LIKE CONCAT(#{month}, '%')
	            GROUP BY sub_mat_type_code, filter_name	         
	        ) a 
	        UNPIVOT ( 
	            qty FOR gubun IN (in_qty, out_qty, stock_qty, real_stock_qty, diff_qty)
	        ) AS b
	    ),
	    EquipData as (
	       select sub_mat_type_code,
	       		  filter_name,
	    		  step_nm as step,
	    		  equip_nm as equip,
	    	  	  stock_date,
	    	  	  1 as sort_order,
	    	  	  'equip_qty' AS gubun,
	    	  	  6 as item_order,
	    	  	  '사용' as item_name1,
	    	  	   '' as item_name2,
	    	  	 sum(out_qty) as out_qty
			from dw_sub_mat_filter_equip_out
			where stock_date LIKE CONCAT(#{month}, '%')
			group by sub_mat_type_code, filter_name, step_nm, equip_nm, stock_date  
			union all 
		    select sub_mat_type_code,
		    	  filter_name,
		    	  step_nm as step,
		    	  equip_nm as equip,
		      	  'Total' as stock_date,
		      	  1 as sort_order,
		      	  'equip_qty' AS gubun,
		      	  6 as item_order,
		      	  '사용' as item_name1,
		      	   '' as item_name2,
		      	 sum(out_qty) as out_qty
			from dw_sub_mat_filter_equip_out
			where stock_date LIKE CONCAT(#{month}, '%')
			group by sub_mat_type_code, filter_name, step_nm, equip_nm 
	    )
	    SELECT 
	        a.*, 	        
	        case when a.item_name1 = '재고' then isnull(b.qty , 0)
	             else null
	        end as pre_stock
	    FROM 
	    (
	        SELECT 
	            sub_mat_type_code,
	            filter_name,
	            step,
	            equip,
	            gubun,
	            sort_order,
	            item_order,
	            item_name1,
	            item_name2,
	            case when item_name1 = '재고' then null 
	                 else ISNULL([Total], 0) 
	            end AS D_Total,	  
	            <foreach collection="days" item="item" separator=",">
	                ISNULL([${item.day}], 0) AS D_${item.day}
	            </foreach>      
	        FROM 
	        ( 
	        	select * from BaseData
	        	union all 
	        	select * from EquipData
	        ) a 
	        PIVOT (
	            SUM(qty) FOR stock_date IN 
	            ([Total],<foreach collection="days" item="item" separator=",">[${item.day}]</foreach>)
	        ) AS pvt
	    ) a 
	    LEFT OUTER JOIN 
	    (
	        SELECT 
	            sub_mat_type_code,
	            filter_name,
	            gubun,
	            qty
	        FROM 
	        (				
	            SELECT 
	                sub_mat_type_code,
	                filter_name,
	                prev_stock_qty AS stock_qty,
	                prev_real_stock_qty AS real_stock_qty,
	                prev_real_stock_qty - prev_stock_qty AS diff_qty
	            FROM dw_sub_mat_filter_stock 
	            WHERE stock_date = CONCAT(#{month}, '01')
	        ) a 
	        UNPIVOT (
	            qty FOR gubun IN (stock_qty, real_stock_qty, diff_qty)
	        ) AS b
	    ) b
	    ON ( a.sub_mat_type_code = b.sub_mat_type_code
	         and a.gubun = b.gubun )      
	    ORDER BY a.sub_mat_type_code, a.filter_name, a.sort_order, item_order, item_name2, step, equip	
	</select>

</mapper>