<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dowinsys.mes.web.m0001000.mapper.M0001006Mapper">

<select id="selectMatChemicalIn" resultType="CamelMap">
		SELECT
			a.material_id,
			a.mat_type_code,
			a.sub_mat_type_code,
			a.in_date,
			a.in_time,
			a.chemical_name,
			a.unit,
			a.in_qty,
			a.use_qty,
			a.remain_qty,
			a.use_yn,
			a.worker_id,
			a.worker_name,
			a.comments,
			b.out_comments,
			a.create_date,
			a.create_user,
			case when isnull(c.close_yn,'N') = 'N' and a.use_yn = 'N' then 'Y'
			 	    else 'N'
		    end as editable					
		FROM dw_sub_mat_chemical_in a
		left outer join 
		 (
				SELECT a.material_id, 
				       STRING_AGG(a.comments, ' / ') AS out_comments
				FROM dw_sub_mat_chemical_out a  
				GROUP BY a.material_id  
		) b
		on ( a.material_id = b.material_id )	
		left outer join ( select * from dw_mat_close_info where mat_category_code ='30' and mat_type_code='CHEMICAL' ) c 
		on ( a.in_date = c.stock_date )	
		WHERE 1 = 1
		<choose>
			<when test="searchMaterialId != null and searchMaterialId.trim() != ''">
				and a.material_id = #{searchMaterialId}
			</when>
			<otherwise>
				  and a.in_date between #{fromDate} and #{toDate}
				<if test="subMatTypeCode != null and subMatTypeCode.trim() != ''" >
				  AND a.sub_mat_type_code = #{subMatTypeCode}	
				</if>
			</otherwise>			
		</choose> 
		order by a.in_date desc, a.in_time desc, a.material_id 
	</select>
	
	<select id="selectBarcodeChemicalInfo" resultType="CamelMap">
		select  a.dup_yn,
				#{materialId} as material_id,
				#{subMatTypeCode} as sub_mat_type_code,
				COALESCE(b.code_name,'') as chemical_name
		from 
		(
				SELECT CASE WHEN count(1) > 0 THEN 'Y'
				        ELSE 'N'
				   END AS dup_yn
				FROM  dw_sub_mat_chemical_in a 
				WHERE a.material_id = #{materialId}
		) a 
		left outer join
		(
			SELECT code, code_name 
			from dw_common_code 
			WHERE maj_code='80'
			  and code = #{subMatTypeCode}
	    ) b 
		on ( 1 = 1 )
	</select>	
	
	<select id="checkUseInData" resultType="Map">
		select COALESCE(STRING_AGG(material_id, '/'), 'NoData') AS materialId
		from dw_sub_mat_chemical_in a
		where upper(a.material_id) in
		<foreach item="item" collection="vo" open="(" separator="," close=")" >
			upper(#{item.materialId})
		</foreach>
		and a.use_yn = 'Y'
	</select>
	
	<select id="checkInsertInData" resultType="Map">
		select COALESCE(STRING_AGG(material_id, '/'), 'NoData') AS materialId
		from dw_sub_mat_chemical_in a
		where upper(a.material_id) in
		<foreach item="item" collection="vo" open="(" separator="," close=")" >
			upper(#{item.materialId})
		</foreach>
	</select>		
	
	<insert id="insertInData">
		INSERT INTO dw_sub_mat_chemical_in
		(
			material_id,
			mat_type_code,
			sub_mat_type_code,
			in_date,
			in_time,
			chemical_name,
			unit,
			in_qty,
			use_qty,
			remain_qty,
			use_yn,
			worker_id,
			worker_name,
			comments,
			create_date,
			create_user
		)
		VALUES
		(
			#{materialId},
			#{matTypeCode},
			#{subMatTypeCode},
			#{inDate},
			#{inTime},
			#{chemicalName},
			#{unit},
			#{inQty},
			0,
			#{inQty},
			#{useYn},
			#{workerId},
			#{workerName},
			#{comments},
			getdate(),
			#{workerId}
		)
	</insert>	
	
	<update id="updateInData">
		UPDATE dw_sub_mat_chemical_in
			SET worker_name = #{workerName},
				in_qty = #{inQty},
				remain_qty = #{inQty},
				comments = #{comments}
		WHERE material_id = #{materialId}
	</update>	
	
	<update id="updateRemainQtyMinus">
		UPDATE dw_sub_mat_chemical_in
			SET use_qty = use_qty + #{outQty},
			    remain_qty = remain_qty - #{outQty},
			    use_yn = 'Y'
		WHERE material_id = #{materialId}
	</update>
	
	<update id="updateRemainQtyPlus">
		UPDATE dw_sub_mat_chemical_in
			SET use_qty = use_qty - #{outQty},
			    remain_qty = remain_qty + #{outQty},
			    use_yn = case when ( use_qty - #{outQty} ) <![CDATA[ <=0 ]]> then 'N'
			             	  else 'Y'
			              end			             
		WHERE material_id = #{materialId}
	</update>	
	
	<update id="updateRemainDiffQty">
		UPDATE dw_sub_mat_chemical_in
			SET use_qty = use_qty + ( #{outQty} - #{orgOutQty} ),
			    remain_qty = remain_qty - ( #{outQty} - #{orgOutQty} ),
			    use_yn = case when ( use_qty + ( #{outQty} - #{orgOutQty} ) ) <![CDATA[ <=0 ]]> then 'N'
			             	  else 'Y'
			              end			             
		WHERE material_id = #{materialId}
	</update>	
	
	<delete id="deleteInData">
		DELETE  FROM dw_sub_mat_chemical_in
		WHERE material_id = #{materialId}
	</delete>
	
	<select id="selectMatChemicalOut" resultType="CamelMap">
		SELECT
			a.out_no,
			a.mat_type_code,
			a.sub_mat_type_code,
			a.work_date,
			a.shift_code,
			a.out_seq,
			a.out_date,
			a.out_time,
			a.material_id,
			a.chemical_name,
			a.worker_name,
			a.line,
			a.step_code,
			a.step_nm,
			a.equip_no,
			a.equip_nm,
			a.unit,
			isnull(b.remain_qty,0) remain_qty,
			isnull(a.out_qty,0) as stock_qty,
			isnull(a.out_qty,0) out_qty,
			isnull(a.out_qty,0) as org_out_qty,
			isnull(a.return_qty,0) return_qty,
			( isnull(a.out_qty,0) - isnull(a.return_qty,0)) as use_qty,
			a.comments,
			b.comments as in_comments,
			a.create_date,
			a.create_user,
			case when isnull(d.close_yn, 'N') = 'N' and 
			 		<![CDATA[
						( ( datepart(hour,getdate())   <  8
			              		and ( a.out_date = CONVERT(VARCHAR(8), getdate(), 112) ) or 
							  		( a.out_date = CONVERT(VARCHAR(8), DATEADD(DAY, -1, getdate()), 112) and convert(int,substring(a.out_time, 1,2))   >   19)
					     	) or 
					     	( datepart(hour,getdate())   >=   8 and a.out_date = CONVERT(VARCHAR(8), getdate(), 112) 
					     	) or
					     	b.remain_qty > 0   
					     )  and c.return_no is null  ]]>
			        then 'Y'
			        else 'N'
			   end editable				
		FROM dw_sub_mat_chemical_out a 
		join dw_sub_mat_chemical_in b 
		on ( a.material_id = b.material_id)
		left outer join dw_sub_mat_chemical_return c 
		on ( a.out_no = c.out_no )
		left outer join (  select * from dw_mat_close_info where mat_category_code ='30' and mat_type_code='CHEMICAL' ) d 
		on ( a.work_date = d.stock_date )			
		where 1 = 1
		<choose>
			<when test="searchMaterialId != null and searchMaterialId.trim() != ''">
				and a.material_id = #{searchMaterialId}
			</when>
			<otherwise>
				  and a.work_date between #{fromDate} and #{toDate}
				<if test="subMatTypeCode != null and subMatTypeCode.trim() != ''" >
				  AND a.sub_mat_type_code = #{subMatTypeCode}	
				</if>		
				<if test="shiftCode != null and shiftCode.trim() != ''" >		
				  and a.shift_code = #{shiftCode}
				</if>
				<if test="equip != null and equip.trim() != ''" >	
				  and a.line= #{line} and a.equip_no = #{equip}
				</if>	
			</otherwise>			
		</choose> 
		order by a.out_date desc, 
			    a.out_time desc,
			    a.out_seq desc	
	</select>	
	
	<select id="selectUseEquipList" resultType="CamelMap">
		select *
		from 
		( 
			SELECT distinct 
			   	   a.line
			   	 , a.설비약명
			  FROM dw_equipment_mast a
			where 1 = 1 
			<if test="line != null and line.trim() != ''" >	
				and a.line = #{line}
			</if>
			<if test="stepCode != null and stepCode.size()  > 0" >
				and  a.공정코드 IN
					<foreach item="item" collection="stepCode" open="(" separator="," close=")" >
						#{item}
					</foreach>			
			</if>
			  and a.사용여부 = '1'
			  <if test="subMatTypeCode == null or subMatTypeCode == '' or subMatTypeCode == 'W'" >
			  union all 
			  SELECT distinct line, REPLACE(설비약명, 'TP#', 'TP세정기#') AS 설비약명
			  from dw_equipment_mast 
			  where 설비약명 like 'TP#%'	
			  </if>
		) a order by line, 설비약명
	</select>		
	
	<select id="selectBarcodeInfo" resultType="CamelMap">	
		select a.material_id, 
				a.sub_mat_type_code,
				a.chemical_name,
				a.use_qty,
				a.remain_qty,
				a.remain_qty as stock_qty, 
				a.use_yn,
				a.comments as in_comments,
				b.return_no
		  from dw_sub_mat_chemical_in a 
		  left outer join ( select * from dw_sub_mat_chemical_return where confirm_yn = 'N' ) b 
		  on ( a.material_id = b.material_id )
		where a. material_id = #{materialId} 
	</select>	
	
	<select id="checkRemainQty" resultType="CamelMap">
		select 'LACK_QTY' as check_code, material_id
		  from dw_sub_mat_chemical_in a
		 where upper(a.material_id) = upper(#{materialId})
		   and remain_qty -  #{outQty} <![CDATA[ < 0 ]]>
		union all 
		select 'RETURN_CONFIRM' as check_code, material_id
		from dw_sub_mat_chemical_return a
		where upper(a.material_id) = upper(#{materialId})
		  and confirm_yn = 'N'		  
	</select>
	
	<select id="checkRemainDiffQty" resultType="CamelMap">
		select material_id
		  from dw_sub_mat_chemical_in a
		 where upper(a.material_id) = upper(#{materialId})
		   and remain_qty - ( #{outQty} - #{orgOutQty} )<![CDATA[ < 0 ]]>
	</select>
	
	<insert id="insertOutData">
		INSERT INTO dw_sub_mat_chemical_out
		(
			out_no,
			mat_type_code,
			sub_mat_type_code,
			work_date,
			shift_code,
			out_seq,
			out_date,
			out_time,
			material_id,
			chemical_name,
			worker_name,
			line,
			step_code,
			step_nm,
			equip_no,
			equip_nm,
			unit,
			out_qty,
			return_qty,
			comments,
			create_date,
			create_user
		)
		VALUES
		(
		   ( select case when  isnull(max(out_no),'') = '' then  'CO' + #{workDate} + #{shiftCode} + '001'
			              else  'CO'  + #{workDate}  + #{shiftCode}  + RIGHT('000' + cast((cast(substring(max(out_no),12,14) as int) + 1) as varchar),3)
			         end as out_no
				from dw_sub_mat_chemical_out 
			   where work_date = #{workDate} and shift_code = #{shiftCode}
			),	           
			#{matTypeCode},    
			#{subMatTypeCode},
			#{workDate},        
			#{shiftCode},       
			(select COALESCE(max(out_seq),0)+1 from dw_sub_mat_chemical_out where work_date=#{workDate} and mat_type_code='CHEMICAL' and shift_code = #{shiftCode}),          
			#{outDate},         
			#{outTime},         
			#{materialId},    
			#{chemicalName},       
			#{workerName},      
			#{line},             
			#{stepCode},        
			#{stepNm},          
			#{equipNo},         
			#{equipNm},         
			#{unit},             
			isnull(#{outQty},0),
			0,
			#{comments}, 
			getdate(),
			#{createUser}
		)
	</insert>		
	
	<update id="updateOutData">
		UPDATE dw_sub_mat_chemical_out
			SET worker_name = #{workerName},
				line = #{line},
				step_code = #{stepCode},
				step_nm = #{stepNm},
				equip_no = #{equipNo},
				equip_nm = #{equipNm},
				out_qty = isnull(#{outQty},0),
				comments = #{comments}
		WHERE out_no = #{outNo}
	</update>
	
	<delete id="deleteOutData">
		DELETE FROM dw_sub_mat_chemical_out
		WHERE out_no = #{outNo}
	</delete>	
	
	<select id="selectMatChemicalReturn" resultType="CamelMap">
		SELECT
			a.return_no,
			a.mat_type_code,
			a.sub_mat_type_code,
			a.work_date,
			a.shift_code,
			c.code_name as shift_name,
			a.out_no,
			b.out_seq,
			b.out_date,
			b.out_time,		
			a.material_id,
			a.chemical_name,
			b.worker_name as out_worker_name,
			b.equip_nm,
			b.step_nm,
			b.unit,
			b.out_qty,
			a.return_qty as org_return_qty,
			a.return_qty,
			a.return_date,
			a.return_time,
			a.worker_name,
			a.comments,
			a.confirm_yn,
			a.create_date,
			a.create_user,
			case when isnull(e.close_yn, 'N') = 'N' and 
			 		<![CDATA[
						( ( datepart(hour,getdate())   <  8
			              		and ( b.out_date = CONVERT(VARCHAR(8), getdate(), 112) ) or 
							  		( b.out_date = CONVERT(VARCHAR(8), DATEADD(DAY, -1, getdate()), 112) and convert(int,substring(b.out_time, 1,2))   >   19)
					     	) or 
					     	( datepart(hour,getdate())   >=   8 and b.out_date = CONVERT(VARCHAR(8), getdate(), 112) 
					     	) or
					     	d.remain_qty > 0   
					     )  ]]>
			        then 'Y'
			        else 'N'
			   end editable	
		FROM dw_sub_mat_chemical_return a
		join dw_sub_mat_chemical_out b 
		on ( a.out_no = b.out_no)		
		left outer join ( select code, code_name from dw_common_code where maj_code='75' ) c
		 on ( a.shift_code = c.code )		
		join dw_sub_mat_chemical_in d 
		on ( a.material_id = d.material_id)		
		left outer join (  select * from dw_mat_close_info where mat_category_code ='30' and mat_type_code='CHEMICAL' ) e
		on ( a.work_date = e.stock_date )		
		where a.work_date between #{fromDate} and #{toDate}
		<if test="subMatTypeCode != null and subMatTypeCode.trim() != ''" >		
		  and a.sub_mat_type_code = #{subMatTypeCode}
		</if>		
		order by b.out_date desc, 
			    b.out_time desc,
			    b.out_seq desc	
	</select>	
	
	<select id="selectBarcodeOutInfo" resultType="CamelMap">	
		select 
			a.out_no,
			a.mat_type_code,
			a.sub_mat_type_code,
			a.work_date,
			a.shift_code,
			a.shift_name,
			a.out_seq,
			a.out_date,
			a.out_time,
			a.material_id,
			a.chemical_name,
			a.out_worker_name,
			a.line,
			a.step_code,
			a.step_nm,
			a.equip_no,
			a.equip_nm,
			a.unit,
			a.out_qty,
			b.return_no,
			b.return_date,
			b.return_time,
			b.worker_name			
		from 
		( 
			select
				a.out_no,
				a.mat_type_code,
				a.sub_mat_type_code,
				a.work_date,
				a.shift_code,
				b.code_name as shift_name,
				a.out_seq,
				a.out_date,
				a.out_time,
				a.material_id,
				a.chemical_name,
				a.worker_name as out_worker_name,
				a.line,
				a.step_code,
				a.step_nm,
				a.equip_no,
				a.equip_nm,
				a.unit,
				a.out_qty
			 from dw_sub_mat_chemical_out a
			 left outer join ( select code, code_name from dw_common_code where maj_code='75' ) b
			   on ( a.shift_code = b.code )
			where material_id = #{materialId}
			  and out_no = ( select max(out_no) 
			  				 from dw_sub_mat_chemical_out
			  				 where material_id = #{materialId}
			  				)
		) a 
		left outer join dw_sub_mat_chemical_return b 
		on ( a.out_no = b.out_no )
	</select>	
	
	<select id="checkExistsReturnData" resultType="CamelMap">
		select return_no,
			   return_date,
			   return_time,
			   worker_name
		from dw_sub_mat_chemical_return a
		where a.out_no = #{outNo}		
	</select>
	
	<select id="checkOrgReturnQty" resultType="int">
		select return_qty
		from dw_sub_mat_chemical_return a
		where a.return_no = #{returnNo}		
	</select>	
	
	<insert id="insertReturnData">
		INSERT INTO dw_sub_mat_chemical_return
		(
			return_no,
			mat_type_code,
			sub_mat_type_code,
			work_date,
			shift_code,
			out_no,
			material_id,
			chemical_name,
			return_date,
			return_time,
			worker_name,
			unit,
			return_qty,
			comments,
			confirm_yn,
			create_date,
			create_user
		)
		VALUES
		(
			#{returnNo},	        
			#{matTypeCode},    
			#{subMatTypeCode},
			#{workDate},        
			#{shiftCode},       
			#{outNo},
			#{materialId},    
			#{chemicalName},    
   			#{returnDate},
			#{returnTime},
			#{workerName},    
			#{unit},             
			isnull(#{returnQty},0),
			#{comments}, 
			#{confirmYn},
			getdate(),
			#{createUser}
		)
	</insert>	
	
	<update id="updateReturnData">
		UPDATE dw_sub_mat_chemical_return
			SET worker_name = #{workerName},
				return_qty = isnull(#{returnQty},0),
				confirm_yn = #{confirmYn},
				comments = #{comments}
		WHERE return_no = #{returnNo}
	</update>
	
	<delete id="deleteReturnData">
		DELETE FROM dw_sub_mat_chemical_return
		WHERE return_no = #{returnNo}
	</delete>
	
	<update id="updateReturnQtyForOuData">
		UPDATE dw_sub_mat_chemical_out
			SET return_qty = #{returnQty}
		WHERE out_no = #{outNo}
	</update>
	
	<update id="updateReturnQtyZeroForOuData">
		UPDATE dw_sub_mat_chemical_out
			SET return_qty = 0
		WHERE out_no = #{outNo}
	</update>	
	
	<update id="updateRemainQtyMinusForReturn">
		UPDATE dw_sub_mat_chemical_in
			SET use_qty = use_qty + #{returnQty},
			    remain_qty = remain_qty - #{returnQty}
		WHERE material_id = #{materialId}
	</update>		
	
	<update id="updateRemainQtyPlusForReturn">
		UPDATE dw_sub_mat_chemical_in
			SET use_qty = use_qty - #{returnQty},
			    remain_qty = remain_qty + #{returnQty}
		WHERE material_id = #{materialId}
	</update>
	
	<update id="updateRemainDiffQtyForReturn">
		UPDATE dw_sub_mat_chemical_in
			SET use_qty = use_qty - ( #{returnQty} - #{orgReturnQty} ),
			    remain_qty = remain_qty + ( #{returnQty} - #{orgReturnQty} )			                 
		WHERE material_id = #{materialId}
	</update>
	
	<!-- 재고실사 -->	
	<select id="selectMaxStockDate" resultType="String">
		SELECT CONVERT(VARCHAR(8), 
			       	   ISNULL(max(stock_date), CONVERT(VARCHAR(8), DATEADD(HOUR, 9, GETUTCDATE()), 112)), 
			       	   112) AS stockDate
		FROM dw_sub_mat_chemical_id_stock
	</select>	
	
	<select id="selectConfirmN" resultType="int">
		select count(1) as cnt
		from dw_sub_mat_chemical_id_stock
		where stock_date = #{stockDate}
		  and confirm_yn = 'N'
	</select>
	
	<select id="selectSubMatChemicalIdStock" resultType="CamelMap">
		SELECT 
			a.stock_date,
			a.material_id,
			a.mat_type_code,
			a.sub_mat_type_code,
			a.chemical_name,
			a.unit,
			a.prev_stock_qty,
			a.prev_real_stock_qty,
			a.in_qty,
			a.out_qty,
			a.return_qty,
			a.use_qty,
			a.stock_qty,
			a.real_stock_qty,
			a.diff_qty,	
			a.confirm_yn,
			a.charger_id,
			a.charger_name,
			a.comments,
			case when c.status = 'CLOSE' then 'N'
			     else 'Y'
			end as editable			
		FROM dw_sub_mat_chemical_id_stock a 
		left outer join ( select * from dw_mat_close_info where mat_category_code='30' and mat_type_code='CHEMICAL' ) c
		on ( a.stock_date = c.stock_date  )	
		where a.stock_date = #{stockDate}
		<if test="materialId != null and materialId.trim() != ''" >
		  and a.material_id = #{materialId}
		</if>		
		<if test="subMatType != null and subMatType.trim() != ''" >
		  and a.sub_mat_type_code = #{subMatType}
		</if>
		<if test="confirmYn != null and confirmYn.trim() != ''" >
		  and a.confirm_yn = #{confirmYn}
		</if>
		<if test="diffYn != null and diffYn.trim() != ''" >
          AND (
            	(#{diffYn} = 'N' AND a.diff_qty = 0) OR
            	(#{diffYn} = 'Y' AND a.diff_qty != 0)
           )
		</if>
		order by a.stock_date, a.material_id
	</select>
	
	<select id="createTempMatStockTable">
	    SELECT *
	      INTO ${tempTableName}
	      FROM dw_sub_mat_chemical_id_stock
	     WHERE stock_date = #{stockDate}
	</select>	
	
	<delete id="dropTempMatStockTable">
		DROP TABLE ${tempTableName}
	</delete>		
	
	<delete id="deleteSubMatChemicalIdStock">
		delete from dw_sub_mat_chemical_id_stock
		where stock_date = #{stockDate}
	</delete>
	
	<insert id="insertSubMatChemicalIdStock">
		INSERT INTO dw_sub_mat_chemical_id_stock
		(
			stock_date,
			material_id,
			mat_type_code,
			sub_mat_type_code,
			chemical_name,			
			unit,
			prev_stock_qty,
			prev_real_stock_qty,
			in_qty,
			out_qty,
			return_qty,
			use_qty,
			stock_qty,
			real_stock_qty,
			diff_qty,
			confirm_yn,
			charger_id,
			charger_name,
			comments,
			create_date,
			create_user
		)		
		select a.stock_date,
				a.material_id,
				a.mat_type_code,
				a.sub_mat_type_code,
				a.chemical_name,				
				a.unit,
				a.prev_stock_qty,
				a.prev_real_stock_qty,
				a.in_qty,
				a.out_qty,
				a.return_qty,
				a.use_qty,
				( a.prev_stock_qty + a.in_qty - a.out_qty + a.return_qty ) as stock_qty,				
				case when b.status is null or b.status = 'SUMMARY' or b.real_stock_qty is null then 
							( a.prev_real_stock_qty + a.in_qty - a.out_qty  + a.return_qty) 
					 else b.real_stock_qty
			    end as real_stock_qty,
				case when b.status is null or b.status = 'SUMMARY' or b.real_stock_qty is null then 
							( a.prev_real_stock_qty + a.in_qty - a.out_qty ) - ( a.prev_stock_qty + a.in_qty - a.out_qty )
					 else ( b.real_stock_qty ) - ( a.prev_stock_qty + a.in_qty - a.out_qty )
			    end as diff_qty,	
			    case when b.status is null or b.status = 'SUMMARY' or b.real_stock_qty is null then 'Y'
				     else b.confirm_yn
				end as confirm_yn,
				case when #{workerId} = 'SYSTEM' and #{workerName} = 'SYS_BATCH' and b.charger_id is not null then b.charger_id
				     else #{workerId}
				end as worker_id,
				case when #{workerId} = 'SYSTEM' and #{workerName} = 'SYS_BATCH' and b.charger_id is not null then b.charger_name
				     else #{workerName}
				end as worker_name,
			    case when b.status is null or b.status = 'SUMMARY' or b.real_stock_qty is null then ''
				     else b.comments
				end as comments,	
				getdate(),
				#{workerId}
		from 		
		( 
			select #{stockDate} as stock_date,
					a.material_id,
					a.mat_type_code,
					a.sub_mat_type_code,
					a.chemical_name,							
					a.unit,
					sum(case when gubun = 'PRE_STOCK' then qty else 0 end) as prev_stock_qty,
					sum(case when gubun = 'PRE_STOCK' then real_qty else 0 end) as prev_real_stock_qty,
					sum(case when gubun = 'IN' then qty else 0 end) as in_qty,
					sum(case when gubun = 'OUT' then qty else 0 end) as out_qty,
					sum(case when gubun = 'OUT' then return_qty else 0 end) as return_qty,
					sum(case when gubun = 'OUT' then use_qty else 0 end) as use_qty					
			from 
			(
				SELECT 'PRE_STOCK' as gubun, 
						material_id,
						mat_type_code,
						sub_mat_type_code,
						chemical_name,						
						unit,
						sum(stock_qty) as qty,
						sum(real_stock_qty) as real_qty,
						0 as return_qty,
						0 as use_qty
				FROM dw_sub_mat_chemical_id_stock a
				where stock_date = convert(char(8), dateadd(DAY, -1, cast(#{stockDate} as date)), 112)
				  and ( stock_qty > 0  or real_stock_qty > 0 )
				GROUP by material_id, mat_type_code, sub_mat_type_code, chemical_name, unit
				union all
				SELECT 'IN' as gubun, 
						a.material_id,
						a.mat_type_code,
						a.sub_mat_type_code,
						a.chemical_name,							
						unit,
						sum(in_qty) as qty,
						sum(in_qty) as real_qty,
						0 as return_qty,
						0 as use_qty
			    FROM dw_sub_mat_chemical_in a
				where in_date + in_time between #{stockDate} + '08:00' and convert(char(8), dateadd(DAY, 1, cast(#{stockDate} as date)), 112) + '07:59'
				GROUP by material_id, mat_type_code, sub_mat_type_code, chemical_name, unit
				union all 
				SELECT 'OUT' as gubun, 
						material_id,
						mat_type_code,
						sub_mat_type_code,
						chemical_name,							
						unit,
						sum(out_qty) as qty,
						sum(out_qty) as real_qty,
						sum(return_qty) as return_qty,
						sum(out_qty - return_qty) as use_qty				
				FROM dw_sub_mat_chemical_out a
				where work_date = #{stockDate}
				GROUP BY material_id, mat_type_code, sub_mat_type_code, chemical_name, unit
			) a 
			group by material_id, mat_type_code, sub_mat_type_code, chemical_name, unit
		) a
		left outer join 
		(
			select a.stock_date, a.material_id, a.real_stock_qty, a.confirm_yn, a.comments, b.status, a.charger_id, a.charger_name
			  from ${tempTableName} a 
			left outer join 
			( 
				select * from dw_mat_close_info 
				where stock_date = #{stockDate}
				  and mat_category_code = '30' and mat_type_code='CHEMICAL'
			) b 
			on ( a.stock_date = b.stock_date )
			where a.stock_date = #{stockDate}
		) b 
		on ( a.stock_date = b.stock_date
		     and a.material_id = b.material_id )			
	</insert>
	
	<update id="updateSubMatChemicalIdStock">
		update dw_sub_mat_chemical_id_stock
		   set charger_name = #{workerName}, 
		   	   real_stock_qty = isnull(#{realStockQty},0),
			   diff_qty =  isnull(#{realStockQty},0) - stock_qty,
			   confirm_yn = #{confirmYn},
			   comments = #{comments}
		where stock_date = #{stockDate}
		  and material_id = #{materialId}	
	</update>
	
	<delete id="deleteSubMatChemicalStock">
		delete from dw_sub_mat_chemical_stock
		where stock_date = #{stockDate}
	</delete>
	
	<insert id="insertSubMatChemicalStock">
		INSERT INTO dw_sub_mat_chemical_stock
		(
			stock_date,
			mat_type_code,
			sub_mat_type_code,
			chemical_name,						
			unit,
			prev_stock_qty,
			prev_real_stock_qty,
			in_qty,
			out_qty,
			return_qty,
			use_qty,
			stock_qty,			
			real_stock_qty,
			diff_qty,
			create_date,
			create_user
		)
		select a.stock_date,
				a.mat_type_code,
				a.sub_mat_type_code,
				a.chemical_name,				
				a.unit,	
				isnull(a.prev_stock_qty,0),
				isnull(a.prev_real_stock_qty,0),
				isnull(a.in_qty,0),
				isnull(a.out_qty,0),
				isnull(a.return_qty,0),
				isnull(a.use_qty,0),
				isnull(a.stock_qty,0),
				isnull(a.real_stock_qty,0),
				isnull(a.diff_qty,0),
				getdate(),
				#{workerId}	
		from 
		( 
			select stock_date,
				mat_type_code,
				sub_mat_type_code,
				chemical_name,				
				unit,
				sum(prev_stock_qty) as prev_stock_qty,
				sum(prev_real_stock_qty) as prev_real_stock_qty,
				sum(in_qty) as in_qty,
				sum(out_qty) as out_qty,	
				sum(return_qty) as return_qty,				
				sum(use_qty) as use_qty,
				sum(stock_qty)as stock_qty,
				sum(real_stock_qty) as real_stock_qty,
				sum(diff_qty) as diff_qty
			from dw_sub_mat_chemical_id_stock
			where stock_date = #{stockDate}
			group by stock_date, mat_type_code, sub_mat_type_code, chemical_name, unit
		  ) a 
	</insert>

	<!-- Report -->
	<select id="selectSubMatChemicalMonthReport" resultType="CamelMap">
	WITH BaseData AS (
	        SELECT 
	            sub_mat_type_code,
	            chemical_name,	
	            stock_date,
	            sort_order,	            
	            gubun,
	            CASE WHEN gubun = 'in_qty' THEN '1'
	                 WHEN gubun = 'out_qty' THEN '2'
	                 WHEN gubun = 'return_qty' THEN '3'
	                 WHEN gubun = 'use_qty' THEN '4'	                 
	                 WHEN gubun = 'stock_qty' THEN '6'
	                 WHEN gubun = 'real_stock_qty' THEN '5'
	                 WHEN gubun = 'diff_qty' THEN '7'
	            END AS item_order,
	            CASE WHEN gubun = 'in_qty' THEN '입고'
	                 WHEN gubun = 'out_qty' THEN '불출'
	                 WHEN gubun = 'return_qty' THEN '반납'
	                 WHEN gubun = 'use_qty' THEN '사용'	                 
	                 ELSE '재고'
	            END AS item_name1,  
	            CASE WHEN gubun = 'stock_qty' THEN '전산'
	                 WHEN gubun = 'real_stock_qty' THEN '실물'
	                 WHEN gubun = 'diff_qty' THEN '차이'
	                 ELSE ''
	            END AS item_name2,        
	            qty
	        FROM 
	        (
	            SELECT
	                sub_mat_type_code,
	            	chemical_name,	                
	                stock_date,
	                1 AS sort_order,
	                in_qty,
	                out_qty,
	                return_qty,
	                use_qty,
	                stock_qty,
	                real_stock_qty,
	                diff_qty
	            FROM dw_sub_mat_chemical_stock
	            WHERE stock_date LIKE CONCAT(#{month}, '%')
	            UNION ALL 
	            SELECT
	                sub_mat_type_code,
	                chemical_name,
	                'Total' AS stock_date,
	                1 AS sort_order,
	                SUM(in_qty) AS in_qty,
	                SUM(out_qty) AS out_qty,
	                SUM(return_qty) AS return_qty,
	                SUM(use_qty) AS use_qty,
	                SUM(stock_qty) AS stock_qty,
	                SUM(real_stock_qty) AS real_stock_qty,
	                SUM(diff_qty) AS diff_qty
	            FROM dw_sub_mat_chemical_stock
	            WHERE stock_date LIKE CONCAT(#{month}, '%')
	            GROUP BY sub_mat_type_code, chemical_name	         
	        ) a 
	        UNPIVOT ( 
	            qty FOR gubun IN (in_qty, out_qty, return_qty, use_qty, stock_qty, real_stock_qty, diff_qty)
	        ) AS b
	    )
	    SELECT 
	        a.*, 	        
	        case when a.item_name1 = '재고' then isnull(b.qty , 0)
	             else null
	        end as pre_stock
	    FROM 
	    (
	        SELECT 
	            sub_mat_type_code,
	            chemical_name,	            
	            gubun,
	            sort_order,
	            item_order,
	            item_name1,
	            item_name2,
	            case when item_name1 = '재고' then null 
	                 else ISNULL([Total], 0) 
	            end AS D_Total,	  
	            <foreach collection="days" item="item" separator=",">
	                ISNULL([${item.day}], 0) AS D_${item.day}
	            </foreach>       
	        FROM BaseData
	        PIVOT (
	            SUM(qty) FOR stock_date IN 
	            ([Total],<foreach collection="days" item="item" separator=",">[${item.day}]</foreach>)
	        ) AS pvt
	    ) a 
	    LEFT OUTER JOIN 
	    (
	        SELECT 
	            sub_mat_type_code,
	            chemical_name,
	            gubun,
	            qty
	        FROM 
	        (				
	            SELECT 
	                sub_mat_type_code,
	                chemical_name,
	                prev_stock_qty AS stock_qty,
	                prev_real_stock_qty AS real_stock_qty,
	                prev_real_stock_qty - prev_stock_qty AS diff_qty
	            FROM dw_sub_mat_chemical_stock 
	            WHERE stock_date = CONCAT(#{month}, '01')
	        ) a 
	        UNPIVOT (
	            qty FOR gubun IN (stock_qty, real_stock_qty, diff_qty)
	        ) AS b
	    ) b
	    ON ( a.sub_mat_type_code = b.sub_mat_type_code
	         and a.gubun = b.gubun )      
	    ORDER BY a.sort_order, sub_mat_type_code, chemical_name, item_order, item_name2	
	</select>

</mapper>