<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dowinsys.mes.web.m0001000.mapper.M0001008Mapper">

	<select id="selectMatDummyIn" resultType="CamelMap">
			SELECT
				a.material_id,
				a.mat_type_code,
				a.sub_mat_type_code,
				a.in_date,
				a.in_time,
				a.size,
				a.unit,
				a.in_qty,
				a.use_qty,
				a.remain_qty,
				a.use_yn,
				a.worker_id,
				a.worker_name,
				a.comments,
				b.out_comments,
				a.create_date,
				a.create_user,
				case when isnull(c.close_yn,'N') = 'N' and a.use_yn = 'N' then 'Y'
				 	    else 'N'
			    end as editable						
			FROM dw_sub_mat_dummy_in a
			left outer join 
			 (
					SELECT a.material_id, 
					       STRING_AGG(a.comments, ' / ') AS out_comments
					FROM dw_sub_mat_dummy_out a  
					GROUP BY a.material_id  
			) b
			on ( a.material_id = b.material_id )
			left outer join ( select * from dw_mat_close_info where mat_category_code ='20' and mat_type_code='DUMMY' ) c 
		    on ( a.in_date = c.stock_date )	
			WHERE 1 = 1
			<choose>
				<when test="searchMaterialId != null and searchMaterialId.trim() != ''">
					and a.material_id = #{searchMaterialId}
				</when>
				<otherwise>
					and a.in_date between #{fromDate} and #{toDate}			
					<if test="subMatTypeCode != null and subMatTypeCode.trim() != ''" >
					and a.sub_mat_type_code = #{subMatTypeCode}	
					</if>
				</otherwise>			
			</choose> 
			order by a.in_date desc, a.in_time desc, a.material_id 
	</select>
	
	<select id="selectBarcodeDupYn" resultType="String">
		SELECT CASE WHEN count(1) <![CDATA[ > ]]>  0 THEN 'Y'
		        ELSE 'N'
		   END AS dupYn
		FROM  dw_sub_mat_dummy_in a 
		WHERE a.material_id =  #{materialId}
	</select>	
	
	<select id="checkUseInData" resultType="Map">
		select COALESCE(STRING_AGG(material_id, '/'), 'NoData') AS materialId
		from dw_sub_mat_dummy_in a
		where upper(a.material_id) in
		<foreach item="item" collection="vo" open="(" separator="," close=")" >
			upper(#{item.materialId})
		</foreach>
		and a.use_yn = 'Y'
	</select>		
	
	<select id="checkInsertInData" resultType="Map">
		select COALESCE(STRING_AGG(material_id, '/'), 'NoData') AS materialId
		from dw_sub_mat_dummy_in a
		where upper(a.material_id) in
		<foreach item="item" collection="vo" open="(" separator="," close=")" >
			upper(#{item.materialId})
		</foreach>
	</select>			
	
	<insert id="insertInData">
		INSERT INTO dw_sub_mat_dummy_in
		(
			material_id,
			mat_type_code,
			sub_mat_type_code,
			in_date,
			in_time,
			size,
			unit,
			in_qty,
			use_qty,
			remain_qty,
			use_yn,
			worker_id,
			worker_name,
			comments,
			create_date,
			create_user
		)
		VALUES
		(
			#{materialId},
			#{matTypeCode},
			#{subMatTypeCode},
			#{inDate},
			#{inTime},
			( select code_name from dw_common_code where maj_code='92' and code=#{subMatTypeCode}),
			#{unit},
			#{inQty},
			0,
			#{inQty},
			#{useYn},
			#{workerId},
			#{workerName},
			#{comments},
			getdate(),
			#{workerId}	
		)
	</insert>	
	
	<update id="updateInData">
		UPDATE dw_sub_mat_dummy_in
			SET sub_mat_type_code = #{subMatTypeCode},
				size = ( select code_name from dw_common_code where maj_code='92' and code=#{subMatTypeCode}),
				worker_name = #{workerName},
				in_qty = #{inQty},
				remain_qty = #{inQty},
				comments = #{comments}
		WHERE material_id = #{materialId}
	</update>	
	
	<update id="updateRemainQtyMinus">
		UPDATE dw_sub_mat_dummy_in
			SET use_qty = use_qty + #{outQty},
			    remain_qty = remain_qty - #{outQty},
			    use_yn = 'Y'
		WHERE material_id = #{materialId}
	</update>
	
	<update id="updateRemainQtyPlus">
		UPDATE dw_sub_mat_dummy_in
			SET use_qty = use_qty - #{outQty},
			    remain_qty = remain_qty + #{outQty},
			    use_yn = case when ( use_qty - #{outQty} ) <![CDATA[ <=0 ]]> then 'N'
			             	  else 'Y'
			              end	
		WHERE material_id = #{materialId}	
	</update>	
	
	<update id="updateRemainDiffQty">
		UPDATE dw_sub_mat_dummy_in
			SET use_qty = use_qty + ( #{outQty} - #{orgOutQty} ),
			    remain_qty = remain_qty - ( #{outQty} - #{orgOutQty} ),
			    use_yn = case when ( use_qty + ( #{outQty} - #{orgOutQty} ) ) <![CDATA[ <=0 ]]> then 'N'
			             	  else 'Y'
			              end			             
		WHERE material_id = #{materialId}
	</update>	
	
	<delete id="deleteInData">
		DELETE FROM dw_sub_mat_dummy_in
		WHERE material_id = #{materialId}
	</delete>
	
	<select id="selectMatDummyOut" resultType="CamelMap">
		SELECT
			a.out_no,
			a.mat_type_code,
			a.sub_mat_type_code,
			a.work_date,
			a.shift_code,
			a.out_seq,
			a.out_date,
			a.out_time,
			a.material_id,
			c.code_name as size,
			a.worker_name,
			a.use_category,
			a.line,
			a.step_code,
			a.step_nm,
			a.equip_no,
			a.equip_nm,
			a.unit,
			isnull(b.remain_qty,0) remain_qty,
			isnull(b.remain_qty,0) + isnull(a.out_qty,0) as stock_qty,
			isnull(a.out_qty,0) out_qty,
			isnull(a.out_qty,0) as org_out_qty,
			isnull(a.error_work_qty,0) error_work_qty,
			isnull(a.error_mat_qty,0) error_mat_qty,
			a.comments,
			b.comments as in_comments,
			a.create_date,
			a.create_user,
			case when isnull(d.close_yn, 'N') = 'N' and 
			 		<![CDATA[
						( ( datepart(hour,getdate())   <  8
			              		and ( a.out_date = CONVERT(VARCHAR(8), getdate(), 112) ) or 
							  		( a.out_date = CONVERT(VARCHAR(8), DATEADD(DAY, -1, getdate()), 112) and convert(int,substring(a.out_time, 1,2))   >   19)
					     	) or 
					     	( datepart(hour,getdate())   >=   8 and a.out_date = CONVERT(VARCHAR(8), getdate(), 112) 
					     	) or
					     	b.remain_qty > 0   
					     )  ]]>
			        then 'Y'
			        else 'N'
			   end editable	
		FROM dw_sub_mat_dummy_out a 
		join dw_sub_mat_dummy_in b 
		on ( a.material_id = b.material_id)	
	    JOIN ( SELECT code, code_name from dw_common_code WHERE maj_code='92' ) c
		ON ( a.sub_mat_type_code = c.code )		
		left outer join ( select * from dw_mat_close_info where mat_category_code ='20' and mat_type_code='DUMMY' ) d 
		on ( a.work_date = d.stock_date )				
		where 1 = 1
		<choose>
			<when test="searchMaterialId != null and searchMaterialId.trim() != ''">
				and a.material_id = #{searchMaterialId}
			</when>
			<otherwise>
				  and a.work_date between #{fromDate} and #{toDate}
				<if test="shiftCode != null and shiftCode.trim() != ''" >		
				  and a.shift_code = #{shiftCode}
				</if>
				<if test="useCategory != null and useCategory.trim() != ''" >	
				  and use_category = #{useCategory}
				</if>	
			</otherwise>			
		</choose> 
		order by a.out_date desc, 
			    a.out_time desc,
			    a.out_seq desc	
	</select>
	
	<select id="selectBarcodeInfo" resultType="CamelMap">	
	select a.material_id, 
			a.sub_mat_type_code, 
			a.size,
			a.unit,
			a.use_qty,
			a.remain_qty,
			a.remain_qty as stock_qty, 
			a.use_yn,
			a.comments as in_comments
	  from dw_sub_mat_dummy_in a
	where material_id = #{materialId} 
	</select>	
	
	<select id="checkRemainQty" resultType="CamelMap">
		select material_id
		  from dw_sub_mat_dummy_in a
		 where upper(a.material_id) = upper(#{materialId})
		   and remain_qty -  #{outQty} <![CDATA[ < 0 ]]>
	</select>
	
	<select id="checkRemainDiffQty" resultType="CamelMap">
		select material_id
		  from dw_sub_mat_dummy_in a
		 where upper(a.material_id) = upper(#{materialId})
		   and remain_qty - ( #{outQty} - #{orgOutQty} )<![CDATA[ < 0 ]]>
	</select>		
	
	<select id="insertOutData" resultType="String">
	
		INSERT INTO dw_sub_mat_dummy_out
		(
			out_no,
			mat_type_code,
			sub_mat_type_code,
			work_date,
			shift_code,
			out_seq,
			out_date,
			out_time,
			material_id,
			worker_name,
			use_category,
			line,
			step_code,
			step_nm,
			equip_no,
			equip_nm,
			unit,
			out_qty,
			error_work_qty,
			error_mat_qty,
			comments,
			create_date,
			create_user
		)
		OUTPUT inserted.out_no
		VALUES	
		(
			(
				select case when  isnull(max(out_no),'') = '' then  'DO' + #{workDate} + #{shiftCode} + '001'
			                else  'DO'  + #{workDate}  + #{shiftCode}  + RIGHT('000' + cast((cast(substring(max(out_no),12,14) as int) + 1) as varchar),3)
			           end as out_no
				from dw_sub_mat_dummy_out 
			    where work_date = #{workDate} and shift_code = #{shiftCode}
			),
			#{matTypeCode},
			#{subMatTypeCode},
			#{workDate},
			#{shiftCode},
			(select COALESCE(max(out_seq),0)+1 from dw_sub_mat_dummy_out where work_date=#{workDate} and mat_type_code='DUMMY' and shift_code = #{shiftCode}),
			#{outDate},         
			#{outTime},  
			#{materialId}, 
			#{workerName}, 
			#{useCategory},       
			#{line},             
			#{stepCode},        
			#{stepNm},  
			case when #{useCategory} = 'E' then #{equipNm} 
				 else  #{equipNo}
			end,
			case when #{useCategory} = 'E' then ( select code_name from dw_common_code where maj_code='90' and code= #{equipNm} ) 
				 else  #{equipNm}
			end,    
			#{unit},         
			isnull(#{outQty},0),
			isnull(#{errorWorkQty},0),
			isnull(#{errorMatQty},0),	
			#{comments}, 
			getdate(),
			#{createUser}
		)	
	</select>	
	

	<delete id="deleteOutData">
		DELETE FROM dw_sub_mat_dummy_out
		WHERE out_no = #{outNo}
	</delete>		
	
	<update id="updateOutData">
		UPDATE dw_sub_mat_dummy_out
			SET worker_name = #{workerName},
				line = #{line},
				step_code = #{stepCode},
				step_nm = #{stepNm},
				equip_no = case when #{useCategory} = 'E' then #{equipNm} 
				 				else  #{equipNo}
						   end,
				equip_nm = case when #{useCategory} = 'E' then ( select code_name from dw_common_code where maj_code='90' and code= #{equipNm} ) 
				 				else  #{equipNm}
							end,
				out_qty = isnull(#{outQty},0),
				error_work_qty = isnull(#{errorWorkQty},0),
				error_mat_qty = isnull(#{errorMatQty},0),				
				comments = #{comments}
		WHERE out_no = #{outNo}	
	</update>
	
	<!-- 재고실사 -->	
	<select id="selectMaxStockDate" resultType="String">
		SELECT CONVERT(VARCHAR(8), 
			       	   ISNULL(max(stock_date), CONVERT(VARCHAR(8), DATEADD(HOUR, 9, GETUTCDATE()), 112)), 
			       	   112) AS stockDate
		FROM dw_sub_mat_dummy_id_stock
	</select>	
	
	<select id="selectConfirmN" resultType="int">
		select count(1) as cnt
		from dw_sub_mat_dummy_id_stock
		where stock_date = #{stockDate}
		  and confirm_yn = 'N'
	</select>
	
	<select id="selectSubMatDummyIdStock" resultType="CamelMap">
		SELECT 
			a.stock_date,
			a.material_id,
			a.mat_type_code,
			a.sub_mat_type_code,
			b.code_name as size,
			a.unit,
			a.prev_stock_qty,
			a.prev_real_stock_qty,
			a.in_qty,
			a.out_qty,
			a.error_work_qty,
			a.error_mat_qty,	
			a.stock_qty,
			a.real_stock_qty,
			a.diff_qty,	
			a.confirm_yn,
			a.charger_id,
			a.charger_name,
			a.comments,
			case when c.status = 'CLOSE' then 'N'
			     else 'Y'
			end as editable			
		FROM dw_sub_mat_dummy_id_stock a 
		left outer join ( select code, code_name from dw_common_code where maj_code='92' ) b 
		on ( a.sub_mat_type_code = b.code )		
		left outer join ( select * from dw_mat_close_info where mat_category_code='20' and mat_type_code='DUMMY' ) c
		on ( a.stock_date = c.stock_date  )	
		where a.stock_date = #{stockDate}
		<if test="materialId != null and materialId.trim() != ''" >
		  and a.material_id = #{materialId}
		</if>		
		<if test="subMatType != null and subMatType.trim() != ''" >
		  and a.sub_mat_type_code = #{subMatType}
		</if>
		<if test="confirmYn != null and confirmYn.trim() != ''" >
		  and a.confirm_yn = #{confirmYn}
		</if>
		<if test="diffYn != null and diffYn.trim() != ''" >
          AND (
            	(#{diffYn} = 'N' AND a.diff_qty = 0) OR
            	(#{diffYn} = 'Y' AND a.diff_qty != 0)
           )
		</if>
		order by a.stock_date, a.material_id
	</select>
	
	<select id="createTempMatStockTable">
	    SELECT *
	      INTO ${tempTableName}
	      FROM dw_sub_mat_dummy_id_stock
	     WHERE stock_date = #{stockDate}
	</select>	
	
	<delete id="dropTempMatStockTable">
		DROP TABLE ${tempTableName}
	</delete>		
	
	<delete id="deleteSubMatDummyIdStock">
		delete from dw_sub_mat_dummy_id_stock
		where stock_date = #{stockDate}
	</delete>	
	
	<insert id="insertSubMatDummyIdStock">
		INSERT INTO dw_sub_mat_dummy_id_stock
		(
			stock_date,
			material_id,
			mat_type_code,
			sub_mat_type_code,
			unit,
			prev_stock_qty,
			prev_real_stock_qty,
			in_qty,
			out_qty,
			error_work_qty,
			error_mat_qty,
			stock_qty,
			real_stock_qty,
			diff_qty,
			confirm_yn,
			charger_id,
			charger_name,
			comments,
			create_date,
			create_user
		)		
		select a.stock_date,
				a.material_id,
				a.mat_type_code,
				a.sub_mat_type_code,
				a.unit,
				a.prev_stock_qty,
				a.prev_real_stock_qty,
				a.in_qty,
				a.out_qty,
				a.error_work_qty,
				a.error_mat_qty,
				( a.prev_stock_qty + a.in_qty - a.out_qty ) as stock_qty,				
				case when b.status is null or b.status = 'SUMMARY' or b.real_stock_qty is null then 
							( a.prev_real_stock_qty + a.in_qty - a.out_qty ) 
					 else b.real_stock_qty
			    end as real_stock_qty,
				case when b.status is null or b.status = 'SUMMARY' or b.real_stock_qty is null then 
							( a.prev_real_stock_qty + a.in_qty - a.out_qty ) - ( a.prev_stock_qty + a.in_qty - a.out_qty )
					 else ( b.real_stock_qty ) - ( a.prev_stock_qty + a.in_qty - a.out_qty )
			    end as diff_qty,	
			    case when b.status is null or b.status = 'SUMMARY' or b.real_stock_qty is null then 'Y'
				     else b.confirm_yn
				end as confirm_yn,
				case when #{workerId} = 'SYSTEM' and #{workerName} = 'SYS_BATCH' and b.charger_id is not null then b.charger_id
				     else #{workerId}
				end as worker_id,
				case when #{workerId} = 'SYSTEM' and #{workerName} = 'SYS_BATCH' and b.charger_id is not null then b.charger_name
				     else #{workerName}
				end as worker_name,
			    case when b.status is null or b.status = 'SUMMARY' or b.real_stock_qty is null then ''
				     else b.comments
				end as comments,	
				getdate(),
				#{workerId}
		from 		
		( 
			select #{stockDate} as stock_date,
					a.material_id,
					a.mat_type_code,
					a.sub_mat_type_code,
					a.unit,
					sum(case when gubun = 'PRE_STOCK' then qty else 0 end) as prev_stock_qty,
					sum(case when gubun = 'PRE_STOCK' then real_qty else 0 end) as prev_real_stock_qty,
					sum(case when gubun = 'IN' then qty else 0 end) as in_qty,
					sum(case when gubun = 'OUT' then qty else 0 end) as out_qty,
					sum(case when gubun = 'OUT' then error_work_qty else 0 end) as error_work_qty,
					sum(case when gubun = 'OUT' then error_mat_qty else 0 end) as error_mat_qty
			from 
			(
				SELECT 'PRE_STOCK' as gubun, 
						a.material_id,
						a.mat_type_code,
						a.sub_mat_type_code,
						unit,
						sum(stock_qty) as qty,
						sum(real_stock_qty) as real_qty,
						0 as error_work_qty,
						0 as error_mat_qty						
				FROM dw_sub_mat_dummy_id_stock a
				where stock_date = convert(char(8), dateadd(DAY, -1, cast(#{stockDate} as date)), 112)
				  and ( stock_qty > 0  or real_stock_qty > 0 )
				GROUP by material_id, mat_type_code, sub_mat_type_code, unit
				union all
				SELECT 'IN' as gubun, 
						a.material_id,
						a.mat_type_code,
						a.sub_mat_type_code,
						unit,
						sum(in_qty) as qty,
						sum(in_qty) as real_qty,
						0 as error_work_qty,
						0 as error_mat_qty								
			    FROM dw_sub_mat_dummy_in a
				where in_date + in_time between #{stockDate} + '08:00' and convert(char(8), dateadd(DAY, 1, cast(#{stockDate} as date)), 112) + '07:59'
				GROUP by material_id, mat_type_code, sub_mat_type_code, unit
				union all 
				SELECT 'OUT' as gubun, 
						material_id,
						mat_type_code,
						sub_mat_type_code,
						unit,
						sum(out_qty) as qty,
						sum(out_qty) as real_qty,
						sum(error_work_qty) as error_work_qty,
						sum(error_mat_qty) as error_mat_qty							
				FROM dw_sub_mat_dummy_out a
				where work_date = #{stockDate}
				GROUP BY material_id, mat_type_code, sub_mat_type_code,unit
			) a 
			group by material_id, mat_type_code, sub_mat_type_code, unit
		) a
		left outer join 
		(
			select a.stock_date, a.material_id, a.real_stock_qty, a.confirm_yn, a.comments, b.status, a.charger_id, a.charger_name
			  from ${tempTableName} a 
			left outer join 
			( 
				select * from dw_mat_close_info 
				where stock_date = #{stockDate}
				  and mat_category_code = '20' and mat_type_code='DUMMY'
			) b 
			on ( a.stock_date = b.stock_date )
			where a.stock_date = #{stockDate}
		) b 
		on ( a.stock_date = b.stock_date
		     and a.material_id = b.material_id )			
	</insert>	
	
	<update id="updateSubMatDummyIdStock">
		update dw_sub_mat_dummy_id_stock
		   set charger_name = #{workerName}, 
		   	   real_stock_qty = isnull(#{realStockQty},0),
			   diff_qty =  isnull(#{realStockQty},0) - stock_qty,
			   confirm_yn = #{confirmYn},
			   comments = #{comments}
		where stock_date = #{stockDate}
		  and material_id = #{materialId}	
	</update>
	
	<delete id="deleteSubMatDummyStock">
		delete from dw_sub_mat_dummy_stock
		where stock_date = #{stockDate}
	</delete>
	
	<insert id="insertSubMatDummyStock">
		INSERT INTO dw_sub_mat_dummy_stock
		(
			stock_date,
			mat_type_code,
			sub_mat_type_code,
			unit,
			prev_stock_qty,
			prev_real_stock_qty,
			in_qty,
			out_qty,
			error_work_qty,
			error_mat_qty,			
			stock_qty,			
			real_stock_qty,
			diff_qty,
			create_date,
			create_user
		)		
		select stock_date,
			mat_type_code,
			sub_mat_type_code,
			unit,
			sum(prev_stock_qty) as prev_stock_qty,
			sum(prev_real_stock_qty) as prev_real_stock_qty,
			sum(in_qty) as in_qty,
			sum(out_qty) as out_qty,
			sum(error_work_qty) as error_work_qty,
			sum(error_mat_qty) as error_mat_qty,			
			sum(stock_qty)as stock_qty,
			sum(real_stock_qty) as real_stock_qty,
			sum(diff_qty) as diff_qty,
			getdate(),
			#{workerId}
		from dw_sub_mat_dummy_id_stock
		where stock_date = #{stockDate}
		group by stock_date, mat_type_code, sub_mat_type_code, unit	
	</insert>
	
<!-- Report -->
	<select id="selectSubMatDummyMonthReport" resultType="CamelMap">

			WITH BaseData AS (
	        SELECT 
	            sub_mat_type_code,
	            stock_date,
	            sort_order,
	            gubun,
	            CASE WHEN gubun = 'in_qty' THEN 10
	                 WHEN gubun = 'out_qty' THEN 20
	                 WHEN gubun = 'loss_qty' THEN 30
	                 WHEN gubun = 'real_stock_qty' THEN 50
	                 WHEN gubun = 'stock_qty' THEN 60
	                 WHEN gubun = 'diff_qty' THEN 70
	            END AS item_order,
	            CASE WHEN gubun = 'in_qty' THEN '입고'
	                 WHEN gubun = 'out_qty' THEN '투입'
	                 WHEN gubun = 'loss_qty' THEN 'Loss'
	                 ELSE '재고'
	            END AS item_name1,  
	            CASE WHEN gubun = 'in_qty' THEN ''
	                 WHEN gubun = 'out_qty' THEN ''
	                 WHEN gubun = 'loss_qty' THEN ''
	                 WHEN gubun = 'real_stock_qty' THEN '실물'
	                 WHEN gubun = 'stock_qty' THEN '전산'	                 
	                 WHEN gubun = 'diff_qty' THEN '차이'
	            END AS item_name2,        
	            qty
	        FROM (
	            SELECT 
	                stock_date,
	                sub_mat_type_code,
	                1 AS sort_order,
	                in_qty,
	                out_qty,
	                ( error_work_qty + error_mat_qty ) as loss_qty,	                
	                real_stock_qty,
	                stock_qty,
	                diff_qty
	            FROM dw_sub_mat_dummy_stock
	            WHERE stock_date LIKE CONCAT(#{month}, '%')
	            UNION ALL 
	            SELECT 
	                'Total' AS stock_date,
	                sub_mat_type_code,
	                1 AS sort_order,
	                SUM(in_qty) AS in_qty,
	                SUM(out_qty) AS out_qty,
	                SUM(error_work_qty + error_mat_qty) AS loss_qty,	               
	                SUM(real_stock_qty) AS real_stock_qty,
	                SUM(stock_qty) AS stock_qty,
	                SUM(diff_qty) AS diff_qty
	            FROM dw_sub_mat_dummy_stock
	            WHERE stock_date LIKE CONCAT(#{month}, '%')	            
	            GROUP BY sub_mat_type_code
	            UNION ALL 
	            SELECT 
	                stock_date,
	                'Total' AS sub_mat_type_code,
	                0 AS sort_order,
	                SUM(in_qty) AS in_qty,
	                SUM(out_qty) AS out_qty,
	                SUM(error_work_qty + error_mat_qty) AS loss_qty,	                
	                SUM(real_stock_qty) AS real_stock_qty,
	                SUM(stock_qty) AS stock_qty,
	                SUM(diff_qty) AS diff_qty
	            FROM dw_sub_mat_dummy_stock
	            WHERE stock_date LIKE CONCAT(#{month}, '%') 
	            GROUP BY stock_date
	            UNION ALL 
	            SELECT 
	                'Total' AS stock_date,
	                'Total' AS sub_mat_type_code,
	                0 AS sort_order,
	                SUM(in_qty) AS in_qty,
	                SUM(out_qty) AS out_qty,
	                SUM(error_work_qty + error_mat_qty) AS loss_qty,	                
	                SUM(real_stock_qty) AS real_stock_qty,
	                SUM(stock_qty) AS stock_qty,
	                SUM(diff_qty) AS diff_qty
	            FROM dw_sub_mat_dummy_stock
	            WHERE stock_date LIKE CONCAT(#{month}, '%') 
	        ) a 
	        UNPIVOT ( 
	            qty FOR gubun IN (in_qty, out_qty, loss_qty, real_stock_qty, stock_qty, diff_qty)
	        ) AS b
	    ),
	    OutData as (
			select sub_mat_type_code,
			       work_date,
			       gubun,			    		   
			       case when gubun = 'out_qty' then use_category
			            else '' 
			       end as use_category,
		           case when use_category = 'E' then '기타'
		                when equip_no = '999' then '수동 적층'		                 
		                else '자동 적층'
		           end as auto_manual,			       
			       case when gubun = 'out_qty' then equip_no
			            else 'Total'
			       end as equip_no,
			       case when gubun = 'out_qty' then equip_nm
			            when gubun = 'error_work_qty' then '작업 불량' 
			            when gubun = 'error_mat_qty' then '원자재 불량'			            
			       end as equip_nm,		           
			       qty
			from dw_sub_mat_dummy_out a
			UNPIVOT ( 
	            qty FOR gubun IN (out_qty, error_work_qty, error_mat_qty)
	        ) AS b			
			where work_date LIKE CONCAT(#{month}, '%')
	    )
	    , OutSumData as (		    	
	    		select a.sub_mat_type_code,
      				   a.work_date,
      				   1 as sort_order,
      				   a.gubun,
      				   case when a.gubun = 'out_qty' then 25
      				        when a.gubun = 'error_work_qty' then 35      				   
      				        when a.gubun = 'error_mat_qty' then 35
      				   end as item_order,
      				   case when a.gubun = 'out_qty' then '투입'
      				        else 'Loss'
      				   end as item_name1, 
					   a.use_category,
					   case when a.use_category = 'E' then '기타'
					        else isnull(b.code_name,'')
					   end as use_category_name,
			           case when a.use_category = 'E' then 99 
			                else isnull(b.sort_order,0)
			           end as sub_item_order, 
			           a.sub_item_sort_order,
			           a.auto_manual,
			           a.equip_no,
			           a.equip_nm,
      				   a.qty       				   
	    		from 
	    		( 
			    	select a.sub_mat_type_code,
			    		   a.work_date,
			    		   a.gubun,
			               1 as sub_item_sort_order,
			               a.use_category,
			               a.auto_manual,
			               a.equip_no,
			               a.equip_nm,	               
			               sum(qty) as qty
			    	from OutData a
			    	group by a.sub_mat_type_code,
			    		     a.work_date,
			    		     a.gubun,
				             a.use_category,
				             a.auto_manual,
				             a.equip_no,
				             a.equip_nm	 	    		     
			    	union all 		    	
			    	select a.sub_mat_type_code,
			    		   'Total' as work_date,
			    		   a.gubun,
			               1 as sub_item_sort_order,			               
			               a.use_category,
			               a.auto_manual,
			               a.equip_no,
			               a.equip_nm,	               
			               sum(qty) as qty
			    	from OutData a 
			    	group by a.sub_mat_type_code,
		 			    	 a.gubun,
				             a.use_category,
				             a.auto_manual,
				             a.equip_no,
				             a.equip_nm			             
				    union all 
			    	select a.sub_mat_type_code,
			    		   a.work_date,
			    		   a.gubun,
			               0 as sub_item_sort_order,
			               a.use_category,
			               'Total' as auto_manual,
			               'Total' as equip_no,
			               case when gubun='out_qty' then 'Total'
			                    else equip_nm
			               end as equip_nm,		               
			               sum(qty) as qty
			    	from OutData a
			    	group by a.sub_mat_type_code,
			    		     a.work_date,
			    		     a.gubun,
				             a.use_category,
				             case when gubun='out_qty' then 'Total'
			                     else equip_nm
			                 end	
			    	union all 	
			    	select a.sub_mat_type_code,
			    		   'Total' as work_date,
			    		   a.gubun,
			               0 as sub_item_sort_order,
			               a.use_category,
			               'Total' as auto_manual,
			               'Total' as equip_no,
			               case when gubun='out_qty' then 'Total'
			                    else equip_nm
			               end as equip_nm,		               
			               sum(qty) as qty
			    	from OutData a
			    	group by a.sub_mat_type_code,
					    	 a.gubun,
				             a.use_category,
				             case when gubun='out_qty' then 'Total'
			                     else equip_nm
			                 end
			) a
			left outer join ( select code, code_name, sort_order from dw_common_code where maj_code = '74') b 
			on ( a.use_category = b.code )			
	    )
	    SELECT 
	        a.*, 	        
	        case when a.item_name1 = '재고' then isnull(b.qty , 0)
	             else null
	        end as pre_stock,
	        case when a.sub_mat_type_code = 'Total' then a.sub_mat_type_code
	             else c.code_name 
	         end as sub_mat_type_name
	    FROM 
	    (
	        SELECT 
	            sub_mat_type_code,
	            gubun,
	            sort_order,
	            item_order,
                item_name1,
	            sub_item_order,
	            sub_item_sort_order,	           
	            item_name2,
	            item_name3,
	            item_name4,
	            case when item_name1 = '재고' then null 
	                 else ISNULL([Total], 0) 
	             end AS D_Total,  
	            <foreach collection="days" item="item" separator=",">
	                ISNULL([${item.day}], 0) AS D_${item.day}
	            </foreach>
	        FROM
	        (
	        	select sub_mat_type_code,
	        		   stock_date,
	        		   sort_order,
	        		   gubun,
	        		   item_order,
	        		   item_name1,	        		   
	        		   item_order as sub_item_order,
	        		   sort_order as sub_item_sort_order,
	        		   case when gubun = 'out_qty' or gubun = 'loss_qty' then 'Total'
	        		        else ''
	        		   end as item_name2,
	        		   'Total' as item_name3,	        		   	        		   
	        		   item_name2 as item_name4,
	        		   qty
	        	from BaseData
	        	union all 
	        	select sub_mat_type_code,
	        		   work_date,
	        		   sort_order,
	        		   gubun,
	        		   item_order,
           		       item_name1,
	        		   sub_item_order,
	        		   sub_item_sort_order,	        		  
	        		   use_category_name as item_name2,
	        		   auto_manual as item_name3,
	        		   equip_nm as item_name4,
	        		   qty
	        	from OutSumData
	        ) a
	        PIVOT (
	            SUM(qty) FOR stock_date IN 
	            ([Total],<foreach collection="days" item="item" separator=",">[${item.day}]</foreach>)
	        ) AS pvt
	    ) a 
	    LEFT OUTER JOIN 
	    (
	        SELECT 
	            sub_mat_type_code,
	            gubun,
	            qty
	        FROM 
	        (				
	            SELECT 
	                sub_mat_type_code,
	                prev_stock_qty AS stock_qty,
	                prev_real_stock_qty AS real_stock_qty,
	                prev_real_stock_qty - prev_stock_qty AS diff_qty
	            FROM dw_sub_mat_tool_stock 
	            WHERE stock_date = CONCAT(#{month}, '01')
	            UNION ALL 
	            SELECT 
	                'Total' AS sub_mat_type_code,
	                SUM(prev_stock_qty) AS stock_qty,
	                SUM(prev_real_stock_qty) AS real_stock_qty,
	                SUM(prev_real_stock_qty - prev_stock_qty) AS diff_qty
	            FROM dw_sub_mat_tool_stock 
	            WHERE stock_date = CONCAT(#{month}, '01') 
	        ) a 
	        UNPIVOT (
	            qty FOR gubun IN (stock_qty, real_stock_qty, diff_qty)
	        ) AS b
	    ) b
	    ON (a.sub_mat_type_code = b.sub_mat_type_code 
	        AND a.gubun = b.gubun)
		left outer join ( select code, code_name, sort_order from dw_common_code where maj_code='92' ) c
		on ( a.sub_mat_type_code = c.code )		        
	    ORDER BY a.sort_order, c.sort_order, a.item_order, a.sub_item_order, a.sub_item_sort_order, a.item_name3 desc, a.item_name4

	</select>

</mapper>